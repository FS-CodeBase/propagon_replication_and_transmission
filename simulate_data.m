function [propagon_data,sampling_times] = ...
                    simulate_data(lambda,rho,sampling_times,sampling_rate)
% FUNCTION: SIMULATE_DATA
% % Author: Fabian Santiago
% % E-mail: FabianSantiago707@gmail.com
%
% DESCRIPTION
% % simulates data from the structured population model with linear
% % aggregate replication dynamics. The data is generated by using
% % rejection sampling from the multimodal distribution.
%
% INPUTS
% % lambda: replication rate
% % rho: transmission bias
% % sampling_times: times at which to sample data
% % sampling_rate: number of samples per hour
%
% OUTPUTS
% % propagon_data: cell array of simulated aggregate counts in time
% % sampling_times: times at which simulated data is sampled 
%

% c = parpool('local',20); % For par-for loop

% Add Folder to Path
addpath('./am_code/') % Model solutions, likelihood, recursive log of sum

% Max number of points to consider for rejection sampling per iteration
pts_wnd = 10^5; 

% Small number of propagons with small variance at the start of the
% propagon sampling
mu = 10; sig = 1;

% Labels for each simulated dataset
Npts  = 10^6;       % Number of points within range of aggregate values considered
Npts_window = 10^6; % Number of points in search window

% Simulated propagon counts
propagon_data = cell(1,length(sampling_times)); 

% Sample simulated propagon counts
parfor t = 1:length(sampling_times)
    tic
    [Yn,~,cn,~,~] = load_model_solutions(mu,sig);
    T = sampling_times(t);
    if T==0
        T=10^-32;
    end
    new_obs = [];
    % Storage of propagon counts and dynamic range selection.
    a_max = (mu+3*sig)*exp(T*lambda);
    a_vec = linspace(1,a_max,Npts);
    while numel(new_obs) < sampling_rate
        gen = 100;
        aggs_pdf = 0;
        % Assuming n0 = 1, initial number of cells
        maxGen = ceil(T*60/90);
        gen_vec = cn(0:maxGen,T)/sum(cn(0:maxGen,T));
        gen_vec = (gen_vec>=0.05).*(1:(maxGen+1)); gen_vec(gen_vec==0)=[];
        minGen = 0;
        maxGen = max(gen_vec)-1;
        while cn(gen,T)/sum(cn(minGen:maxGen,T)) < 0.05 || gen > maxGen
            gen_prob = cumsum([0 cn(minGen:maxGen,T)/sum(cn(minGen:maxGen,T))]);
            gen = sum(gen_prob < rand())-1;
            if cn(gen,T)/sum(cn(minGen:maxGen,T)) >= 0.05 && gen <= maxGen
                aggs_pdf = Yn(gen,T,a_vec,lambda,rho)/sum(cn(minGen:maxGen,T));
            end
        end

        a_idx = aggs_pdf > 10^-6;
        a_idx = a_idx.*(1:Npts);
        a_idx(a_idx == 0)=[];
        a_tmp = linspace(a_vec(a_idx(1)),a_vec(a_idx(end)),Npts_window);
        rnd_pdf = rand(1,pts_wnd)*max(Yn(gen,T,a_tmp,lambda,rho))/sum(cn(minGen:maxGen,T));
        rnd_agg = a_vec(a_idx(1))+rand(1,pts_wnd)*(a_vec(a_idx(end))-a_vec(a_idx(1)));
        if any(rnd_pdf < Yn(gen,T,rnd_agg,lambda,rho)/sum(cn(minGen:maxGen,T)))
            idx = find((rnd_pdf < Yn(gen,T,rnd_agg,lambda,rho)/sum(cn(minGen:maxGen,T))))
            new_obs = [new_obs rnd_agg(idx(1))];
        end
    end
    toc, disp(t)
    propagon_data{t} = new_obs;
end
num2str2 =@(x,n) [num2str(round(floor(x),0)),'p',...
                num2str(round((x-round(floor(x),0))*10^n,0))];

f_str = ['./simulated_data/simdata_mu',num2str2(mu,2),...
         'sig',num2str2(sig,2),...
         'lambda',num2str2(lambda,2),...
         'rho',num2str2(rho,2),...
         'smph',num2str2(sampling_rate,2)];
save(f_str,'propagon_data','sampling_times','sampling_rate',...
                'mu','sig','lambda','rho')  
